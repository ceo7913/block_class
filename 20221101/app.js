// typeScript 란?
// JS 에서 타입 설정이 추가된 언어
// JS 에서 타입이 확장된 언어
// typeScript 는 JS 의 상위 집합 슈퍼셋으로서 대형 프로젝트를 진행할때
// 어느정도 약점 오류를 잡는데 좋다.
// C++, C# 같이 객체지향 프로그래밍을 지원하는데
// typeScript 는 객체지향 프로그래밍에 특화된 프로그래밍 패턴을 지원하는데
// 현재는 함수형 프로그래밍이 좀 대세라서 타입검사나 추론등의 기능을 사용만 할거다.

// typeScript 를 사용하면 JS 로 작업할때 보다 개발에서 생기는 에러를 사전에 방지할 수 있고
// JS 의 코드의 품질과 개발 생산성을 높일 수 있다.

// 코드의 완성 가이드
//JS는 타입이 정해져 있지 않아서 자동완성이 미리 뜨지 않아 일일이 타이핑 해야함
// typeScript 는 타입을 정해놔서 미리 자동완성이 뜨기 때문에 빠르고 정확하게 작업할 수 있다.

// typeScript 는 에러를 사전에 방지하는데 JS는 코드를 실행시켜야지 에러를 확인 할 수 있고
// typeScript 는 작성한 코드가 문제가 있으면 실행시키기 전부터 바로바로 확인해서 문제를 해결할 수 있다.

// typeScript 는 프로그래밍 언어고 typeScript 의 컴파일은 그냥 typeScript 코드를 JS 코드로
// 바꿔주는 것 JS 로 바꿔주는 이유는 브라우저가 이해할 수 있는게 typeScript가 아니라 JS 로
// 작성된 코드이기 때문에

// 타임 스크립트를 설치해보자
// 설치 명령어

//----------------------------------------------------------------
// npm install -g typescript
//----------------------------------------------------------------

// 설치 확인 방법
//----------------------------------------------------------------
// tsc --version
//----------------------------------------------------------------

// tsconfig.json 생성 명령어
//----------------------------------------------------------------
// tsc --init
//----------------------------------------------------------------
// 처음에 설치하면 tsconfig.json 파일에 오류를 표시하는데 src 폴더를 만들어서 거기에 넣던지
// 아니면 visualcode 를 껏다 키면 됨

// tsconfig.json 은 typeScript 의 생성파일 typeScript 의 설정값을 조장할 수 있다.

// typeScript 의 변수 타입 지정
// 변수명 : 타입 = 초기값

// JS 는
// 변수명 = 초기값

// ts-node 라는 typeScript 실행기를 사용해서 개발 환경에서 typeScript 로 작성된 파일을 실행 시켜 볼 수 있다.

// 설치 명령어
//---------------------------------------------------------
// npm install -D typescript ts-node @types/node
//---------------------------------------------------------
